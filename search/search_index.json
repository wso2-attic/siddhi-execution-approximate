{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-execution-approximate\n\n\nThe \nsiddhi-execution-approximate\n is an extension to \nSiddhi\n  that performs approximate computing on event streams.\n\n\nFind some useful links below:\n\n \nSource code\n\n\n \nReleases\n\n* \nIssue tracker\n\n\nLatest API Docs\n\n\nLatest API Docs is \n2.0.0\n.\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support. \n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.execution.approximate\n/groupId\n\n        \nartifactId\nsiddhi-execution-approximate\n/artifactId\n\n        \nversion\nx.x.x\n/version\n\n     \n/dependency\n\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\ncount\n \n(Stream Processor)\nThis extension applies the \ncount-min sketch\n algorithm to a Siddhi window. The algorithm calculates the approximate count i.e., the frequency of events that arrive, based on  the given values for the 'relative error' and 'confidence value'. Note that, using this extension without a window may cause an 'out of memory' error.\n\n\ndistinctCount\n \n(Stream Processor)\nThis applies the 'HyperLogLog' algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value on the basis of which the number of distinct events with an accepted level of accuracy is calculated. Note that if this extension is used without a window, it may cause an 'out of memory' error. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\ndistinctCountEver\n \n(Stream Processor)\nThis extension applies the \nHyperLogLog\n algorithm to a Siddhi window in order to calculate the number of distinct events on a streaming data set based on a specific relative error and a confidence value given. Note that this extension returns erroneous values if it is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n. \n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#siddhi-execution-approximate", 
            "text": "The  siddhi-execution-approximate  is an extension to  Siddhi   that performs approximate computing on event streams.  Find some useful links below:   Source code    Releases \n*  Issue tracker", 
            "title": "siddhi-execution-approximate"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  2.0.0 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.     This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.execution.approximate /groupId \n         artifactId siddhi-execution-approximate /artifactId \n         version x.x.x /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "count   (Stream Processor) This extension applies the  count-min sketch  algorithm to a Siddhi window. The algorithm calculates the approximate count i.e., the frequency of events that arrive, based on  the given values for the 'relative error' and 'confidence value'. Note that, using this extension without a window may cause an 'out of memory' error.  distinctCount   (Stream Processor) This applies the 'HyperLogLog' algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value on the basis of which the number of distinct events with an accepted level of accuracy is calculated. Note that if this extension is used without a window, it may cause an 'out of memory' error. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  distinctCountEver   (Stream Processor) This extension applies the  HyperLogLog  algorithm to a Siddhi window in order to calculate the number of distinct events on a streaming data set based on a specific relative error and a confidence value given. Note that this extension returns erroneous values if it is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .     Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.     For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/2.0.0/", 
            "text": "API Docs - v2.0.0\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \ncount-min sketch\n algorithm to a Siddhi window. The algorithm calculates the approximate count i.e., the frequency of events that arrive, based on  the given values for the 'relative error' and 'confidence value'. Note that, using this extension without a window may cause an 'out of memory' error.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value for which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis value determines the rate by which the result can deviate from the actual event count. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it is almost certain that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window that is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound, and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream TransactionStream (userId int, amount double);\nfrom TransactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count or frequency of transactions for each user ID based on the last 1000 transactions, i.e., events. The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate result.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the 'HyperLogLog' algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value on the basis of which the number of distinct events with an accepted level of accuracy is calculated. Note that if this extension is used without a window, it may cause an 'out of memory' error. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value for which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, a minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThe confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include \n0.65\n, \n0.95\n, \n0.99\n, etc..\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count,the lower bound, and the upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream SensorStream (sensorId int);\nfrom SensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm to a Siddhi window in order to calculate the number of distinct events on a streaming data set based on a specific relative error and a confidence value given. Note that this extension returns erroneous values if it is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value for which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThe confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include \n0.65\n, \n0.95\n, \n0.99\n, etc..\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream RequestStream (ip string);\nfrom RequestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream SensorStream (sensorId int);\nfrom SensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, the lower bound, and the upper bound of the approximate answer.", 
            "title": "2.0.0"
        }, 
        {
            "location": "/api/2.0.0/#api-docs-v200", 
            "text": "", 
            "title": "API Docs - v2.0.0"
        }, 
        {
            "location": "/api/2.0.0/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/2.0.0/#count-stream-processor", 
            "text": "This extension applies the  count-min sketch  algorithm to a Siddhi window. The algorithm calculates the approximate count i.e., the frequency of events that arrive, based on  the given values for the 'relative error' and 'confidence value'. Note that, using this extension without a window may cause an 'out of memory' error.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value for which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This value determines the rate by which the result can deviate from the actual event count. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it is almost certain that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event. \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window that is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound, and upper bound of the approximate answer.  EXAMPLE 2  define stream TransactionStream (userId int, amount double);\nfrom TransactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count or frequency of transactions for each user ID based on the last 1000 transactions, i.e., events. The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate result.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.0/#distinctcount-stream-processor", 
            "text": "This applies the 'HyperLogLog' algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value on the basis of which the number of distinct events with an accepted level of accuracy is calculated. Note that if this extension is used without a window, it may cause an 'out of memory' error. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value for which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, a minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         The confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include  0.65 ,  0.95 ,  0.99 , etc.. \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count,the lower bound, and the upper bound of the approximate answer.  EXAMPLE 2  define stream SensorStream (sensorId int);\nfrom SensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/2.0.0/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm to a Siddhi window in order to calculate the number of distinct events on a streaming data set based on a specific relative error and a confidence value given. Note that this extension returns erroneous values if it is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value for which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         The confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include  0.65 ,  0.95 ,  0.99 , etc.. \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream RequestStream (ip string);\nfrom RequestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream SensorStream (sensorId int);\nfrom SensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, the lower bound, and the upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.1/", 
            "text": "API Docs - v1.1.1\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \ncount-min sketch\n algorithm to a Siddhi window. The algorithm calculates the approximate count i.e., the frequency of events that arrive, based on  the given values for the 'relative error' and 'confidence value'. Note that, using this extension without a window may cause an 'out of memory' error.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value for which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis value determines the rate by which the result can deviate from the actual event count. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it is almost certain that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window that is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound, and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream TransactionStream (userId int, amount double);\nfrom TransactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count or frequency of transactions for each user ID based on the last 1000 transactions, i.e., events. The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate result.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the 'HyperLogLog' algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value on the basis of which the number of distinct events with an accepted level of accuracy is calculated. Note that if this extension is used without a window, it may cause an 'out of memory' error. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value for which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, a minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThe confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include \n0.65\n, \n0.95\n, \n0.99\n, etc..\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count,the lower bound, and the upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream SensorStream (sensorId int);\nfrom SensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm to a Siddhi window in order to calculate the number of distinct events on a streaming data set based on a specific relative error and a confidence value given. Note that this extension returns erroneous values if it is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value for which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThe confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include \n0.65\n, \n0.95\n, \n0.99\n, etc..\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream RequestStream (ip string);\nfrom RequestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream SensorStream (sensorId int);\nfrom SensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, the lower bound, and the upper bound of the approximate answer.", 
            "title": "1.1.1"
        }, 
        {
            "location": "/api/1.1.1/#api-docs-v111", 
            "text": "", 
            "title": "API Docs - v1.1.1"
        }, 
        {
            "location": "/api/1.1.1/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.1.1/#count-stream-processor", 
            "text": "This extension applies the  count-min sketch  algorithm to a Siddhi window. The algorithm calculates the approximate count i.e., the frequency of events that arrive, based on  the given values for the 'relative error' and 'confidence value'. Note that, using this extension without a window may cause an 'out of memory' error.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value for which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This value determines the rate by which the result can deviate from the actual event count. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it is almost certain that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event. \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window that is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound, and upper bound of the approximate answer.  EXAMPLE 2  define stream TransactionStream (userId int, amount double);\nfrom TransactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count or frequency of transactions for each user ID based on the last 1000 transactions, i.e., events. The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate result.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.1/#distinctcount-stream-processor", 
            "text": "This applies the 'HyperLogLog' algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value on the basis of which the number of distinct events with an accepted level of accuracy is calculated. Note that if this extension is used without a window, it may cause an 'out of memory' error. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value for which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, a minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         The confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include  0.65 ,  0.95 ,  0.99 , etc.. \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count,the lower bound, and the upper bound of the approximate answer.  EXAMPLE 2  define stream SensorStream (sensorId int);\nfrom SensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.1/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm to a Siddhi window in order to calculate the number of distinct events on a streaming data set based on a specific relative error and a confidence value given. Note that this extension returns erroneous values if it is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value for which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         The confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include  0.65 ,  0.95 ,  0.99 , etc.. \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream RequestStream (ip string);\nfrom RequestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream SensorStream (sensorId int);\nfrom SensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, the lower bound, and the upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.0/", 
            "text": "API Docs - v1.1.0\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \ncount-min sketch\n algorithm to a Siddhi window. The algorithm calculates the approximate count i.e., the frequency of events that arrive, based on  the given values for the 'relative error' and 'confidence value'. Note that, using this extension without a window may cause an 'out of memory' error.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value for which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis value determines the rate by which the result can deviate from the actual event count. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it is almost certain that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window that is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound, and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream TransactionStream (userId int, amount double);\nfrom TransactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count or frequency of transactions for each user ID based on the last 1000 transactions, i.e., events. The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate result.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the 'HyperLogLog' algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value on the basis of which the number of distinct events with an accepted level of accuracy is calculated. Note that if this extension is used without a window, it may cause an 'out of memory' error. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value for which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, a minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThe confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include \n0.65\n, \n0.95\n, \n0.99\n, etc..\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count,the lower bound, and the upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream SensorStream (sensorId int);\nfrom SensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm to a Siddhi window in order to calculate the number of distinct events on a streaming data set based on a specific relative error and a confidence value given. Note that this extension returns erroneous values if it is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value for which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThe confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include \n0.65\n, \n0.95\n, \n0.99\n, etc..\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream RequestStream (ip string);\nfrom RequestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream SensorStream (sensorId int);\nfrom SensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, the lower bound, and the upper bound of the approximate answer.", 
            "title": "1.1.0"
        }, 
        {
            "location": "/api/1.1.0/#api-docs-v110", 
            "text": "", 
            "title": "API Docs - v1.1.0"
        }, 
        {
            "location": "/api/1.1.0/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.1.0/#count-stream-processor", 
            "text": "This extension applies the  count-min sketch  algorithm to a Siddhi window. The algorithm calculates the approximate count i.e., the frequency of events that arrive, based on  the given values for the 'relative error' and 'confidence value'. Note that, using this extension without a window may cause an 'out of memory' error.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value for which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This value determines the rate by which the result can deviate from the actual event count. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it is almost certain that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event. \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window that is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound, and upper bound of the approximate answer.  EXAMPLE 2  define stream TransactionStream (userId int, amount double);\nfrom TransactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count or frequency of transactions for each user ID based on the last 1000 transactions, i.e., events. The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate result.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.0/#distinctcount-stream-processor", 
            "text": "This applies the 'HyperLogLog' algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value on the basis of which the number of distinct events with an accepted level of accuracy is calculated. Note that if this extension is used without a window, it may cause an 'out of memory' error. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value for which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, a minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         The confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include  0.65 ,  0.95 ,  0.99 , etc.. \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count,the lower bound, and the upper bound of the approximate answer.  EXAMPLE 2  define stream SensorStream (sensorId int);\nfrom SensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.1.0/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm to a Siddhi window in order to calculate the number of distinct events on a streaming data set based on a specific relative error and a confidence value given. Note that this extension returns erroneous values if it is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value for which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         The confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include  0.65 ,  0.95 ,  0.99 , etc.. \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream RequestStream (ip string);\nfrom RequestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream SensorStream (sensorId int);\nfrom SensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, the lower bound, and the upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.22/", 
            "text": "API Docs - v1.0.22\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \ncount-min sketch\n algorithm to a Siddhi window. The algorithm calculates the approximate count i.e., the frequency of events that arrive, based on  the given values for the 'relative error' and 'confidence value'. Note that, using this extension without a window may cause an 'out of memory' error.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value for which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis value determines the rate by which the result can deviate from the actual event count. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it is almost certain that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window that is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound, and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream TransactionStream (userId int, amount double);\nfrom TransactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count or frequency of transactions for each user ID based on the last 1000 transactions, i.e., events. The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate result.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the 'HyperLogLog' algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value on the basis of which the number of distinct events with an accepted level of accuracy is calculated. Note that if this extension is used without a window, it may cause an 'out of memory' error. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value for which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, a minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThe confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include \n0.65\n, \n0.95\n, \n0.99\n, etc..\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count,the lower bound, and the upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream SensorStream (sensorId int);\nfrom SensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm to a Siddhi window in order to calculate the number of distinct events on a streaming data set based on a specific relative error and a confidence value given. Note that this extension returns erroneous values if it is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value for which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThe confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include \n0.65\n, \n0.95\n, \n0.99\n, etc..\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream RequestStream (ip string);\nfrom RequestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream SensorStream (sensorId int);\nfrom SensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, the lower bound, and the upper bound of the approximate answer.", 
            "title": "1.0.22"
        }, 
        {
            "location": "/api/1.0.22/#api-docs-v1022", 
            "text": "", 
            "title": "API Docs - v1.0.22"
        }, 
        {
            "location": "/api/1.0.22/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.22/#count-stream-processor", 
            "text": "This extension applies the  count-min sketch  algorithm to a Siddhi window. The algorithm calculates the approximate count i.e., the frequency of events that arrive, based on  the given values for the 'relative error' and 'confidence value'. Note that, using this extension without a window may cause an 'out of memory' error.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value for which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This value determines the rate by which the result can deviate from the actual event count. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it is almost certain that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event. \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window that is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound, and upper bound of the approximate answer.  EXAMPLE 2  define stream TransactionStream (userId int, amount double);\nfrom TransactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count or frequency of transactions for each user ID based on the last 1000 transactions, i.e., events. The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate result.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.22/#distinctcount-stream-processor", 
            "text": "This applies the 'HyperLogLog' algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value on the basis of which the number of distinct events with an accepted level of accuracy is calculated. Note that if this extension is used without a window, it may cause an 'out of memory' error. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value for which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, a minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         The confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include  0.65 ,  0.95 ,  0.99 , etc.. \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count,the lower bound, and the upper bound of the approximate answer.  EXAMPLE 2  define stream SensorStream (sensorId int);\nfrom SensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.22/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm to a Siddhi window in order to calculate the number of distinct events on a streaming data set based on a specific relative error and a confidence value given. Note that this extension returns erroneous values if it is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value for which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         The confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include  0.65 ,  0.95 ,  0.99 , etc.. \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream RequestStream (ip string);\nfrom RequestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream SensorStream (sensorId int);\nfrom SensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, the lower bound, and the upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.21/", 
            "text": "API Docs - v1.0.21\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.21"
        }, 
        {
            "location": "/api/1.0.21/#api-docs-v1021", 
            "text": "", 
            "title": "API Docs - v1.0.21"
        }, 
        {
            "location": "/api/1.0.21/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.21/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.21/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.21/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.20/", 
            "text": "API Docs - v1.0.20\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.20"
        }, 
        {
            "location": "/api/1.0.20/#api-docs-v1020", 
            "text": "", 
            "title": "API Docs - v1.0.20"
        }, 
        {
            "location": "/api/1.0.20/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.20/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.20/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.20/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.19/", 
            "text": "API Docs - v1.0.19\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.19"
        }, 
        {
            "location": "/api/1.0.19/#api-docs-v1019", 
            "text": "", 
            "title": "API Docs - v1.0.19"
        }, 
        {
            "location": "/api/1.0.19/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.19/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.19/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.19/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.18/", 
            "text": "API Docs - v1.0.18\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.18"
        }, 
        {
            "location": "/api/1.0.18/#api-docs-v1018", 
            "text": "", 
            "title": "API Docs - v1.0.18"
        }, 
        {
            "location": "/api/1.0.18/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.18/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.18/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.18/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.17/", 
            "text": "API Docs - v1.0.17\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.17"
        }, 
        {
            "location": "/api/1.0.17/#api-docs-v1017", 
            "text": "", 
            "title": "API Docs - v1.0.17"
        }, 
        {
            "location": "/api/1.0.17/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.17/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.17/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.17/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.16/", 
            "text": "API Docs - v1.0.16\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.16"
        }, 
        {
            "location": "/api/1.0.16/#api-docs-v1016", 
            "text": "", 
            "title": "API Docs - v1.0.16"
        }, 
        {
            "location": "/api/1.0.16/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.16/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.16/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.16/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.15/", 
            "text": "API Docs - v1.0.15\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.15"
        }, 
        {
            "location": "/api/1.0.15/#api-docs-v1015", 
            "text": "", 
            "title": "API Docs - v1.0.15"
        }, 
        {
            "location": "/api/1.0.15/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.15/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.15/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.15/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.14/", 
            "text": "API Docs - v1.0.14\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.14"
        }, 
        {
            "location": "/api/1.0.14/#api-docs-v1014", 
            "text": "", 
            "title": "API Docs - v1.0.14"
        }, 
        {
            "location": "/api/1.0.14/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.14/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.14/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.14/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.13/", 
            "text": "API Docs - v1.0.13\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.13"
        }, 
        {
            "location": "/api/1.0.13/#api-docs-v1013", 
            "text": "", 
            "title": "API Docs - v1.0.13"
        }, 
        {
            "location": "/api/1.0.13/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.13/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.13/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.13/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.12/", 
            "text": "API Docs - v1.0.12\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.12"
        }, 
        {
            "location": "/api/1.0.12/#api-docs-v1012", 
            "text": "", 
            "title": "API Docs - v1.0.12"
        }, 
        {
            "location": "/api/1.0.12/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.12/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.12/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.12/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.11/", 
            "text": "API Docs - v1.0.11\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.11"
        }, 
        {
            "location": "/api/1.0.11/#api-docs-v1011", 
            "text": "", 
            "title": "API Docs - v1.0.11"
        }, 
        {
            "location": "/api/1.0.11/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.11/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.11/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.11/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.10/", 
            "text": "API Docs - v1.0.10\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.10"
        }, 
        {
            "location": "/api/1.0.10/#api-docs-v1010", 
            "text": "", 
            "title": "API Docs - v1.0.10"
        }, 
        {
            "location": "/api/1.0.10/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.10/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.10/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.10/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.9/", 
            "text": "API Docs - v1.0.9\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.9"
        }, 
        {
            "location": "/api/1.0.9/#api-docs-v109", 
            "text": "", 
            "title": "API Docs - v1.0.9"
        }, 
        {
            "location": "/api/1.0.9/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.9/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.9/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.9/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.8/", 
            "text": "API Docs - v1.0.8\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.8"
        }, 
        {
            "location": "/api/1.0.8/#api-docs-v108", 
            "text": "", 
            "title": "API Docs - v1.0.8"
        }, 
        {
            "location": "/api/1.0.8/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.8/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.8/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.8/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.7/", 
            "text": "API Docs - v1.0.7\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.7"
        }, 
        {
            "location": "/api/1.0.7/#api-docs-v107", 
            "text": "", 
            "title": "API Docs - v1.0.7"
        }, 
        {
            "location": "/api/1.0.7/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.7/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.7/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.7/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.6/", 
            "text": "API Docs - v1.0.6\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.6"
        }, 
        {
            "location": "/api/1.0.6/#api-docs-v106", 
            "text": "", 
            "title": "API Docs - v1.0.6"
        }, 
        {
            "location": "/api/1.0.6/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.6/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.6/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.6/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.5/", 
            "text": "API Docs - v1.0.5\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.5"
        }, 
        {
            "location": "/api/1.0.5/#api-docs-v105", 
            "text": "", 
            "title": "API Docs - v1.0.5"
        }, 
        {
            "location": "/api/1.0.5/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.5/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.5/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.5/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.4/", 
            "text": "API Docs - v1.0.4\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.4"
        }, 
        {
            "location": "/api/1.0.4/#api-docs-v104", 
            "text": "", 
            "title": "API Docs - v1.0.4"
        }, 
        {
            "location": "/api/1.0.4/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.4/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.4/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.4/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.3/", 
            "text": "API Docs - v1.0.3\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.3"
        }, 
        {
            "location": "/api/1.0.3/#api-docs-v103", 
            "text": "", 
            "title": "API Docs - v1.0.3"
        }, 
        {
            "location": "/api/1.0.3/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.3/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.3/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.3/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.2/", 
            "text": "API Docs - v1.0.2\n\n\nApproximate\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \nCount-min-sketch\n algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value based on which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are \n0.65\n, \n0.95\n, \n0.99\n.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "1.0.2"
        }, 
        {
            "location": "/api/1.0.2/#api-docs-v102", 
            "text": "", 
            "title": "API Docs - v1.0.2"
        }, 
        {
            "location": "/api/1.0.2/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.2/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm set on a specific relative error and a confidence value to a Siddhi window in order toon a streaming data set based on a specific relative error calculate the number of distinct events. Note that this extension returns erroneous values if is is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.2/#count-stream-processor", 
            "text": "This extension applies the  Count-min-sketch  algorithm to a Siddhi window. The algorithm is set based on a specific relative error and a confidence value to calculate the approximate count(frequency) of events. Note that using this extension without a window may cause out of memory.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of transactions for each user ID based on the last 1000 transactions (i.e., events). The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.2/#distinctcount-stream-processor", 
            "text": "This applies the HyperLogLog algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value to calculate the number of distinct events with an accepted level of accuracy. Note that if this extension is used without a window, it may cause out of memory errors. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value based on which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the level confidence with which the specified relative error can be considered, specified as a rate. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values are  0.65 ,  0.95 ,  0.99 . \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.1/", 
            "text": "API Docs - v1.0.1\n\n\nApproximate\n\n\ndistinctCount \n(Stream Processor)\n\n\nPerforms HyperLogLog algorithm on a window of streaming data set based on a specific relative error and a confidence value to calculate the number of distinct events. If used without a window, the out of memory errors will occur. For usage without the window, use the approximate:distinctCountEver extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value used to find distinctCount\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error for which the distinct count is obtained. The values must be in the range of (0, 1).\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the confidence for which the relative error is true. The value must be one out of 0.65, 0.95, 0.99.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nRepresents the distinct count considering the last event \n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nRepresents the lower bound of the distinct count considering the last event\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nRepresents the upper bound of the distinct count considering the last event\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nDistinct count of ip addresses which has sent requests within the last 1000ms is calculated for a default relative error of 0.01 and a default confidence of 0.95. Here the distinct count is the number of different values received for ip attribute considering the events received within last 1000ms time period. The answers are 95% guaranteed to have a +-1% error relative to the distinct count. The output will consist of the approximate distinct count, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nDistinct count of sensors which has sent data to the stream out of last 1000 events is calculated for a relative error of 0.05 and a confidence of 0.65. Here the distinct count is the number of different values values received for sensorId attribute in the last 1000 events. The answers are 65% guaranteed to have a +-5% error relative to the distinct count. The output will consist of the approximate distinct count, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nPerforms HyperLogLog algorithm on a streaming data set based on a specific relative error and a confidence value to calculate the number of distinct events. If used with a window, errorneous results will be returned. For usage with the window, use the approximate:distinctCount extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value used to find distinctCount\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error for which the distinct count is obtained. The values must be in the range of (0, 1).\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the confidence for which the relative error is true. The value must be one out of 0.65, 0.95, 0.99.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nRepresents the distinct count considering the last event \n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nRepresents the lower bound of the distinct count considering the last event\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nRepresents the upper bound of the distinct count considering the last event\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nDistinct count of ip addresses which has sent requests is calculated for a default relative error of 0.01 and a default confidence of 0.95. Here the distinct count is the number of different values received for ip attribute. The answers are 95% guaranteed to have a +-1% error relative to the distinct count. The output will consist of the approximate distinct count, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nDistinct count of sensors which has sent data to the stream is calculated for a relative error of 0.05 and a confidence of 0.65. Here the distinct count is the number of different values received for sensorId attribute. The answers are 65% guaranteed to have a +-5% error relative to the distinct count. The output will consist of the approximate distinct count, lower bound and upper bound of the approximate answer.\n\n\n\ncount \n(Stream Processor)\n\n\nPerforms Count-min-sketch algorithm on a window of streaming data set based on a specific relative error and  a confidence value to calculate the approximate count(frequency) of events. Using without a window may return out of memory errors.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value used to find the count\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error for which the count is obtained. The values must be in the range of (0, 1).\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the confidence for which the relative error is true. The values must be in the range of (0, 1).\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nRepresents the approximate count per attribute considering the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nRepresents the lower bound of the count per attribute considering the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nRepresents the upper bound of the count per attribute considering the latest event\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nCount(frequency) of requests from different ip addresses in a time window is calculated for a default relative error of 0.01 and a default confidence of 0.99. Here the counts are calculated considering only the events belong to the last 1000 ms. The answers are 99% guaranteed to have a +-1% error relative to the total event count within the window. The output will consist of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nCount(frequency) of transactions done by different users out of last 1000 transactions based on the userId is calculated for an relative error of 0.05 and a confidence of 0.9. Here the counts are calculated considering only the last 1000 events arrived. The answers are 90% guaranteed to have a +-5%The answers are 99% guaranteed to have a +-5% error relative to the total event count within the window.The output will consist of the approximate count of the latest event, lower bound and upper bound of the approximate answer.", 
            "title": "1.0.1"
        }, 
        {
            "location": "/api/1.0.1/#api-docs-v101", 
            "text": "", 
            "title": "API Docs - v1.0.1"
        }, 
        {
            "location": "/api/1.0.1/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.1/#distinctcount-stream-processor", 
            "text": "Performs HyperLogLog algorithm on a window of streaming data set based on a specific relative error and a confidence value to calculate the number of distinct events. If used without a window, the out of memory errors will occur. For usage without the window, use the approximate:distinctCountEver extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value used to find distinctCount \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error for which the distinct count is obtained. The values must be in the range of (0, 1). \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the confidence for which the relative error is true. The value must be one out of 0.65, 0.95, 0.99. \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         Represents the distinct count considering the last event  \n         LONG \n     \n     \n         distinctCountLowerBound \n         Represents the lower bound of the distinct count considering the last event \n         LONG \n     \n     \n         distinctCountUpperBound \n         Represents the upper bound of the distinct count considering the last event \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  Distinct count of ip addresses which has sent requests within the last 1000ms is calculated for a default relative error of 0.01 and a default confidence of 0.95. Here the distinct count is the number of different values received for ip attribute considering the events received within last 1000ms time period. The answers are 95% guaranteed to have a +-1% error relative to the distinct count. The output will consist of the approximate distinct count, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  Distinct count of sensors which has sent data to the stream out of last 1000 events is calculated for a relative error of 0.05 and a confidence of 0.65. Here the distinct count is the number of different values values received for sensorId attribute in the last 1000 events. The answers are 65% guaranteed to have a +-5% error relative to the distinct count. The output will consist of the approximate distinct count, lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.1/#distinctcountever-stream-processor", 
            "text": "Performs HyperLogLog algorithm on a streaming data set based on a specific relative error and a confidence value to calculate the number of distinct events. If used with a window, errorneous results will be returned. For usage with the window, use the approximate:distinctCount extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value used to find distinctCount \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error for which the distinct count is obtained. The values must be in the range of (0, 1). \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the confidence for which the relative error is true. The value must be one out of 0.65, 0.95, 0.99. \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         Represents the distinct count considering the last event  \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         Represents the lower bound of the distinct count considering the last event \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         Represents the upper bound of the distinct count considering the last event \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  Distinct count of ip addresses which has sent requests is calculated for a default relative error of 0.01 and a default confidence of 0.95. Here the distinct count is the number of different values received for ip attribute. The answers are 95% guaranteed to have a +-1% error relative to the distinct count. The output will consist of the approximate distinct count, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  Distinct count of sensors which has sent data to the stream is calculated for a relative error of 0.05 and a confidence of 0.65. Here the distinct count is the number of different values received for sensorId attribute. The answers are 65% guaranteed to have a +-5% error relative to the distinct count. The output will consist of the approximate distinct count, lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.1/#count-stream-processor", 
            "text": "Performs Count-min-sketch algorithm on a window of streaming data set based on a specific relative error and  a confidence value to calculate the approximate count(frequency) of events. Using without a window may return out of memory errors.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value used to find the count \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error for which the count is obtained. The values must be in the range of (0, 1). \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the confidence for which the relative error is true. The values must be in the range of (0, 1). \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         Represents the approximate count per attribute considering the latest event \n         LONG \n     \n     \n         countLowerBound \n         Represents the lower bound of the count per attribute considering the latest event \n         LONG \n     \n     \n         countUpperBound \n         Represents the upper bound of the count per attribute considering the latest event \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  Count(frequency) of requests from different ip addresses in a time window is calculated for a default relative error of 0.01 and a default confidence of 0.99. Here the counts are calculated considering only the events belong to the last 1000 ms. The answers are 99% guaranteed to have a +-1% error relative to the total event count within the window. The output will consist of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  Count(frequency) of transactions done by different users out of last 1000 transactions based on the userId is calculated for an relative error of 0.05 and a confidence of 0.9. Here the counts are calculated considering only the last 1000 events arrived. The answers are 90% guaranteed to have a +-5%The answers are 99% guaranteed to have a +-5% error relative to the total event count within the window.The output will consist of the approximate count of the latest event, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.0/", 
            "text": "API Docs - v1.0.0\n\n\nApproximate\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nPerforms HyperLogLog algorithm on a streaming data set based on a specific relative error and a confidence value to calculate the number of distinct events. If used with a window, errorneous results will be returned. For usage with the window, use the approximate:distinctCount extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value used to find distinctCount\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error for which the distinct count is obtained. The values must be in the range of (0, 1).\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the confidence for which the relative error is true. The value must be one out of 0.65, 0.95, 0.99.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nRepresents the distinct count considering the last event \n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nRepresents the lower bound of the distinct count considering the last event\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nRepresents the upper bound of the distinct count considering the last event\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nDistinct count of ip addresses which has sent requests is calculated for a default relative error of 0.01 and a default confidence of 0.95. Here the distinct count is the number of different values received for ip attribute. The answers are 95% guaranteed to have a +-1% error relative to the distinct count. The output will consist of the approximate distinct count, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nDistinct count of sensors which has sent data to the stream is calculated for a relative error of 0.05 and a confidence of 0.65. Here the distinct count is the number of different values received for sensorId attribute. The answers are 65% guaranteed to have a +-5% error relative to the distinct count. The output will consist of the approximate distinct count, lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nPerforms HyperLogLog algorithm on a window of streaming data set based on a specific relative error and a confidence value to calculate the number of distinct events. If used without a window, the out of memory errors will occur. For usage without the window, use the approximate:distinctCountEver extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value used to find distinctCount\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error for which the distinct count is obtained. The values must be in the range of (0, 1).\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the confidence for which the relative error is true. The value must be one out of 0.65, 0.95, 0.99.\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nRepresents the distinct count considering the last event \n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nRepresents the lower bound of the distinct count considering the last event\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nRepresents the upper bound of the distinct count considering the last event\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nDistinct count of ip addresses which has sent requests within the last 1000ms is calculated for a default relative error of 0.01 and a default confidence of 0.95. Here the distinct count is the number of different values received for ip attribute considering the events received within last 1000ms time period. The answers are 95% guaranteed to have a +-1% error relative to the distinct count. The output will consist of the approximate distinct count, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nDistinct count of sensors which has sent data to the stream out of last 1000 events is calculated for a relative error of 0.05 and a confidence of 0.65. Here the distinct count is the number of different values values received for sensorId attribute in the last 1000 events. The answers are 65% guaranteed to have a +-5% error relative to the distinct count. The output will consist of the approximate distinct count, lower bound and upper bound of the approximate answer.\n\n\n\ncount \n(Stream Processor)\n\n\nPerforms Count-min-sketch algorithm on a window of streaming data set based on a specific relative error and  a confidence value to calculate the approximate count(frequency) of events. Using without a window may return out of memory errors.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value used to find the count\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error for which the count is obtained. The values must be in the range of (0, 1).\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis is the confidence for which the relative error is true. The values must be in the range of (0, 1).\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nRepresents the approximate count per attribute considering the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nRepresents the lower bound of the count per attribute considering the latest event\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nRepresents the upper bound of the count per attribute considering the latest event\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nCount(frequency) of requests from different ip addresses in a time window is calculated for a default relative error of 0.01 and a default confidence of 0.99. Here the counts are calculated considering only the events belong to the last 1000 ms. The answers are 99% guaranteed to have a +-1% error relative to the total event count within the window. The output will consist of the approximate count of the latest event, lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nCount(frequency) of transactions done by different users out of last 1000 transactions based on the userId is calculated for an relative error of 0.05 and a confidence of 0.9. Here the counts are calculated considering only the last 1000 events arrived. The answers are 90% guaranteed to have a +-5%The answers are 99% guaranteed to have a +-5% error relative to the total event count within the window.The output will consist of the approximate count of the latest event, lower bound and upper bound of the approximate answer.", 
            "title": "1.0.0"
        }, 
        {
            "location": "/api/1.0.0/#api-docs-v100", 
            "text": "", 
            "title": "API Docs - v1.0.0"
        }, 
        {
            "location": "/api/1.0.0/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/1.0.0/#distinctcountever-stream-processor", 
            "text": "Performs HyperLogLog algorithm on a streaming data set based on a specific relative error and a confidence value to calculate the number of distinct events. If used with a window, errorneous results will be returned. For usage with the window, use the approximate:distinctCount extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value used to find distinctCount \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error for which the distinct count is obtained. The values must be in the range of (0, 1). \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the confidence for which the relative error is true. The value must be one out of 0.65, 0.95, 0.99. \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         Represents the distinct count considering the last event  \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         Represents the lower bound of the distinct count considering the last event \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         Represents the upper bound of the distinct count considering the last event \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  Distinct count of ip addresses which has sent requests is calculated for a default relative error of 0.01 and a default confidence of 0.95. Here the distinct count is the number of different values received for ip attribute. The answers are 95% guaranteed to have a +-1% error relative to the distinct count. The output will consist of the approximate distinct count, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  Distinct count of sensors which has sent data to the stream is calculated for a relative error of 0.05 and a confidence of 0.65. Here the distinct count is the number of different values received for sensorId attribute. The answers are 65% guaranteed to have a +-5% error relative to the distinct count. The output will consist of the approximate distinct count, lower bound and upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.0/#distinctcount-stream-processor", 
            "text": "Performs HyperLogLog algorithm on a window of streaming data set based on a specific relative error and a confidence value to calculate the number of distinct events. If used without a window, the out of memory errors will occur. For usage without the window, use the approximate:distinctCountEver extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value used to find distinctCount \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error for which the distinct count is obtained. The values must be in the range of (0, 1). \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the confidence for which the relative error is true. The value must be one out of 0.65, 0.95, 0.99. \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         Represents the distinct count considering the last event  \n         LONG \n     \n     \n         distinctCountLowerBound \n         Represents the lower bound of the distinct count considering the last event \n         LONG \n     \n     \n         distinctCountUpperBound \n         Represents the upper bound of the distinct count considering the last event \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  Distinct count of ip addresses which has sent requests within the last 1000ms is calculated for a default relative error of 0.01 and a default confidence of 0.95. Here the distinct count is the number of different values received for ip attribute considering the events received within last 1000ms time period. The answers are 95% guaranteed to have a +-1% error relative to the distinct count. The output will consist of the approximate distinct count, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream sensorStream (sensorId int);\nfrom sensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  Distinct count of sensors which has sent data to the stream out of last 1000 events is calculated for a relative error of 0.05 and a confidence of 0.65. Here the distinct count is the number of different values values received for sensorId attribute in the last 1000 events. The answers are 65% guaranteed to have a +-5% error relative to the distinct count. The output will consist of the approximate distinct count, lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/1.0.0/#count-stream-processor", 
            "text": "Performs Count-min-sketch algorithm on a window of streaming data set based on a specific relative error and  a confidence value to calculate the approximate count(frequency) of events. Using without a window may return out of memory errors.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value used to find the count \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error for which the count is obtained. The values must be in the range of (0, 1). \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This is the confidence for which the relative error is true. The values must be in the range of (0, 1). \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         Represents the approximate count per attribute considering the latest event \n         LONG \n     \n     \n         countLowerBound \n         Represents the lower bound of the count per attribute considering the latest event \n         LONG \n     \n     \n         countUpperBound \n         Represents the upper bound of the count per attribute considering the latest event \n         LONG \n       Examples  EXAMPLE 1  define stream requestStream (ip string);\nfrom requestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  Count(frequency) of requests from different ip addresses in a time window is calculated for a default relative error of 0.01 and a default confidence of 0.99. Here the counts are calculated considering only the events belong to the last 1000 ms. The answers are 99% guaranteed to have a +-1% error relative to the total event count within the window. The output will consist of the approximate count of the latest event, lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream transactionStream (userId int, amount double);\nfrom transactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  Count(frequency) of transactions done by different users out of last 1000 transactions based on the userId is calculated for an relative error of 0.05 and a confidence of 0.9. Here the counts are calculated considering only the last 1000 events arrived. The answers are 90% guaranteed to have a +-5%The answers are 99% guaranteed to have a +-5% error relative to the total event count within the window.The output will consist of the approximate count of the latest event, lower bound and upper bound of the approximate answer.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v2.0.0\n\n\nApproximate\n\n\ncount \n(Stream Processor)\n\n\nThis extension applies the \ncount-min sketch\n algorithm to a Siddhi window. The algorithm calculates the approximate count i.e., the frequency of events that arrive, based on  the given values for the 'relative error' and 'confidence value'. Note that, using this extension without a window may cause an 'out of memory' error.\n\n\n\nSyntax\n\n\napproximate:count(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value for which the count is derived.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThis value determines the rate by which the result can deviate from the actual event count. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it is almost certain that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.99\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ncount\n\n        \nThis represents the approximate count per attribute based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountLowerBound\n\n        \nThe lowest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ncountUpperBound\n\n        \nThe highest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count(frequency) of requests from different IP addresses in a time window that is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound, and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream TransactionStream (userId int, amount double);\nfrom TransactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query generates the count or frequency of transactions for each user ID based on the last 1000 transactions, i.e., events. The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate result.\n\n\n\ndistinctCount \n(Stream Processor)\n\n\nThis applies the 'HyperLogLog' algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value on the basis of which the number of distinct events with an accepted level of accuracy is calculated. Note that if this extension is used without a window, it may cause an 'out of memory' error. If you need to perform these calculations without windows, use the \napproximate:distinctCountEver\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCount(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value for which the \ndistinctCount\n is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, a minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThe confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include \n0.65\n, \n0.95\n, \n0.99\n, etc..\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCount\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count,the lower bound, and the upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream SensorStream (sensorId int);\nfrom SensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\ndistinctCountEver \n(Stream Processor)\n\n\nThis extension applies the \nHyperLogLog\n algorithm to a Siddhi window in order to calculate the number of distinct events on a streaming data set based on a specific relative error and a confidence value given. Note that this extension returns erroneous values if it is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the \napproximate:distinctCount\n extension.\n\n\n\nSyntax\n\n\napproximate:distinctCountEver(\nINT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT\n value, \nDOUBLE|FLOAT\n relative.error, \nDOUBLE|FLOAT\n confidence)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nvalue\n\n        \nThe value for which the distinct count is calculated.\n\n        \n\n        \nINT\nDOUBLE\nFLOAT\nLONG\nSTRING\nBOOL\nTIME\nOBJECT\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nrelative.error\n\n        \nThis is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify \n1\n or \n0\n as the value for this parameter.\n\n        \n0.01\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconfidence\n\n        \nThe confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include \n0.65\n, \n0.95\n, \n0.99\n, etc..\n\n        \n0.95\n\n        \nDOUBLE\nFLOAT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExtra Return Attributes\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nPossible Types\n\n    \n\n    \n\n        \ndistinctCountEver\n\n        \nThis represents the distinct count based on the last event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverLowerBound\n\n        \nThe lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n    \n\n        \ndistinctCountEverUpperBound\n\n        \nThe highest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event.\n\n        \nLONG\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\ndefine stream RequestStream (ip string);\nfrom RequestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.\n\n\n\nEXAMPLE 2\n\n\ndefine stream SensorStream (sensorId int);\nfrom SensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;\n\n\n\n\n\nThis query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, the lower bound, and the upper bound of the approximate answer.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v200", 
            "text": "", 
            "title": "API Docs - v2.0.0"
        }, 
        {
            "location": "/api/latest/#approximate", 
            "text": "", 
            "title": "Approximate"
        }, 
        {
            "location": "/api/latest/#count-stream-processor", 
            "text": "This extension applies the  count-min sketch  algorithm to a Siddhi window. The algorithm calculates the approximate count i.e., the frequency of events that arrive, based on  the given values for the 'relative error' and 'confidence value'. Note that, using this extension without a window may cause an 'out of memory' error.  Syntax  approximate:count( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value for which the count is derived. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the count can deviate from being perfectly correct. If 0.01 is specified, the count generated must be almost perfectly accurate. If 0.99 is specified, minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         This value determines the rate by which the result can deviate from the actual event count. Higher the value specified, higher is the possibility of the amount of error in the count being no greater than the relative error specified. If 0.99 is specified, it is almost certain that the count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the count is generated with the specified rate of error. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.99 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         count \n         This represents the approximate count per attribute based on the latest event. \n         LONG \n     \n     \n         countLowerBound \n         The lowest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event. \n         LONG \n     \n     \n         countUpperBound \n         The highest value in the range within which the most accurate count for the attribute is included. This count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:count(ip)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count(frequency) of requests from different IP addresses in a time window that is calculated with a default relative error of 0.01 and a default confidence of 0.99. Here, only the events that arrive during the last 1000 milliseconds are considered when calculating the counts. The counts generated are 99% guaranteed to deviate from the actual count within the window by only 1%. The output consists of the approximate count of the latest event, lower bound, and upper bound of the approximate answer.  EXAMPLE 2  define stream TransactionStream (userId int, amount double);\nfrom TransactionStream#window.length(1000)#approximate:count(userId, 0.05, 0.9)\nselect count, countLowerBound, countUpperBound\ninsert into OutputStream;  This query generates the count or frequency of transactions for each user ID based on the last 1000 transactions, i.e., events. The counts generated are 90% guaranteed to deviate from the actual event count within the window by only 5%.The output consists of the approximate count of the latest events, lower bound and upper bound of the approximate result.", 
            "title": "count (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#distinctcount-stream-processor", 
            "text": "This applies the 'HyperLogLog' algorithm to a Siddhi window. The algorithm is set with a relative error and a confidence value on the basis of which the number of distinct events with an accepted level of accuracy is calculated. Note that if this extension is used without a window, it may cause an 'out of memory' error. If you need to perform these calculations without windows, use the  approximate:distinctCountEver  extension.  Syntax  approximate:distinctCount( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value for which the  distinctCount  is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, a minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         The confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include  0.65 ,  0.95 ,  0.99 , etc.. \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCount \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream RequestStream (ip string);\nfrom RequestStream#window.time(1000)#approximate:distinctCount(ip)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count,the lower bound, and the upper bound of the approximate answer.  EXAMPLE 2  define stream SensorStream (sensorId int);\nfrom SensorStream#window.length(1000)\n#approximate:distinctCount(sensorId, 0.05, 0.65)\nselect distinctCount, distinctCountLowerBound, distinctCountUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.", 
            "title": "distinctCount (Stream Processor)"
        }, 
        {
            "location": "/api/latest/#distinctcountever-stream-processor", 
            "text": "This extension applies the  HyperLogLog  algorithm to a Siddhi window in order to calculate the number of distinct events on a streaming data set based on a specific relative error and a confidence value given. Note that this extension returns erroneous values if it is used with a Siddhi window. If you want to perform these calculations with a window, you need to use the  approximate:distinctCount  extension.  Syntax  approximate:distinctCountEver( INT|DOUBLE|FLOAT|LONG|STRING|BOOL|TIME|OBJECT  value,  DOUBLE|FLOAT  relative.error,  DOUBLE|FLOAT  confidence)  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         value \n         The value for which the distinct count is calculated. \n         \n         INT DOUBLE FLOAT LONG STRING BOOL TIME OBJECT \n         No \n         No \n     \n     \n         relative.error \n         This is the relative error to be allowed for the distinct count generated, expressed as a value between 0 and 1. Lower the value specified, lower is the rate by which the distinct count can deviate from being perfectly correct. If 0.01 is specified, the distinct count generated must be almost perfectly accurate. If 0.99 is specified, the minimal level of accuracy is expected. Note that you cannot specify  1  or  0  as the value for this parameter. \n         0.01 \n         DOUBLE FLOAT \n         Yes \n         No \n     \n     \n         confidence \n         The confidence value determines the degree of guarantee with which the relative error given can be treated. Higher the value specified, higher is the possibility of the amount of error in the distinct count being no greater than the relative error specified. If 0.99 is specified, it can be almost considered with certainty that the distinct count is generated with the specified rate of relative error. If 0.01 is specified, there can be minimal certainty as to whether the distinct count is generated with the specified rate of error. The possible values include  0.65 ,  0.95 ,  0.99 , etc.. \n         0.95 \n         DOUBLE FLOAT \n         Yes \n         No \n       Extra Return Attributes  \n     \n         Name \n         Description \n         Possible Types \n     \n     \n         distinctCountEver \n         This represents the distinct count based on the last event. \n         LONG \n     \n     \n         distinctCountEverLowerBound \n         The lowest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event. \n         LONG \n     \n     \n         distinctCountEverUpperBound \n         The highest value in the range within which the most accurate distinct count for the attribute is included. This distinct count range is based on the latest event. \n         LONG \n       Examples  EXAMPLE 1  define stream RequestStream (ip string);\nfrom RequestStream#approximate:distinctCountEver(ip)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each IP address that has sent requests within the last 1000 milliseconds. The distinct count is 95% guaranteed to deviate no more than 1% from the actual distinct count per IP address.The output consists of the approximate distinct count, and the lower bound and upper bound of the approximate answer.  EXAMPLE 2  define stream SensorStream (sensorId int);\nfrom SensorStream#approximate:distinctCountEver(sensorId, 0.05, 0.65)\nselect distinctCountEver, distinctCountEverLowerBound, distinctCountEverUpperBound\ninsert into OutputStream;  This query calculates the distinct count of events for each sensor that has sent data to the stream. This value is calculated based on the last 1000 events in a sliding manner. The calculated distinct count is 65% guaranteed to deviate no more than 5% from the actual distinct count. The output consists of the approximate distinct count, the lower bound, and the upper bound of the approximate answer.", 
            "title": "distinctCountEver (Stream Processor)"
        }, 
        {
            "location": "/LICENSE/", 
            "text": "Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n\n\n\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n\n\n\n\n\nDefinitions.\n\n\n\"License\" shall mean the terms and conditions for use, reproduction,\n  and distribution as defined by Sections 1 through 9 of this document.\n\n\n\"Licensor\" shall mean the copyright owner or entity authorized by\n  the copyright owner that is granting the License.\n\n\n\"Legal Entity\" shall mean the union of the acting entity and all\n  other entities that control, are controlled by, or are under common\n  control with that entity. For the purposes of this definition,\n  \"control\" means (i) the power, direct or indirect, to cause the\n  direction or management of such entity, whether by contract or\n  otherwise, or (ii) ownership of fifty percent (50%) or more of the\n  outstanding shares, or (iii) beneficial ownership of such entity.\n\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity\n  exercising permissions granted by this License.\n\n\n\"Source\" form shall mean the preferred form for making modifications,\n  including but not limited to software source code, documentation\n  source, and configuration files.\n\n\n\"Object\" form shall mean any form resulting from mechanical\n  transformation or translation of a Source form, including but\n  not limited to compiled object code, generated documentation,\n  and conversions to other media types.\n\n\n\"Work\" shall mean the work of authorship, whether in Source or\n  Object form, made available under the License, as indicated by a\n  copyright notice that is included in or attached to the work\n  (an example is provided in the Appendix below).\n\n\n\"Derivative Works\" shall mean any work, whether in Source or Object\n  form, that is based on (or derived from) the Work and for which the\n  editorial revisions, annotations, elaborations, or other modifications\n  represent, as a whole, an original work of authorship. For the purposes\n  of this License, Derivative Works shall not include works that remain\n  separable from, or merely link (or bind by name) to the interfaces of,\n  the Work and Derivative Works thereof.\n\n\n\"Contribution\" shall mean any work of authorship, including\n  the original version of the Work and any modifications or additions\n  to that Work or Derivative Works thereof, that is intentionally\n  submitted to Licensor for inclusion in the Work by the copyright owner\n  or by an individual or Legal Entity authorized to submit on behalf of\n  the copyright owner. For the purposes of this definition, \"submitted\"\n  means any form of electronic, verbal, or written communication sent\n  to the Licensor or its representatives, including but not limited to\n  communication on electronic mailing lists, source code control systems,\n  and issue tracking systems that are managed by, or on behalf of, the\n  Licensor for the purpose of discussing and improving the Work, but\n  excluding communication that is conspicuously marked or otherwise\n  designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity\n  on behalf of whom a Contribution has been received by Licensor and\n  subsequently incorporated within the Work.\n\n\n\n\n\n\nGrant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n\n\n\n\n\nGrant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n\n\n\n\n\nRedistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n\n(a) You must give any other recipients of the Work or\n      Derivative Works a copy of this License; and\n\n\n(b) You must cause any modified files to carry prominent notices\n      stating that You changed the files; and\n\n\n(c) You must retain, in the Source form of any Derivative Works\n      that You distribute, all copyright, patent, trademark, and\n      attribution notices from the Source form of the Work,\n      excluding those notices that do not pertain to any part of\n      the Derivative Works; and\n\n\n(d) If the Work includes a \"NOTICE\" text file as part of its\n      distribution, then any Derivative Works that You distribute must\n      include a readable copy of the attribution notices contained\n      within such NOTICE file, excluding those notices that do not\n      pertain to any part of the Derivative Works, in at least one\n      of the following places: within a NOTICE text file distributed\n      as part of the Derivative Works; within the Source form or\n      documentation, if provided along with the Derivative Works; or,\n      within a display generated by the Derivative Works, if and\n      wherever such third-party notices normally appear. The contents\n      of the NOTICE file are for informational purposes only and\n      do not modify the License. You may add Your own attribution\n      notices within Derivative Works that You distribute, alongside\n      or as an addendum to the NOTICE text from the Work, provided\n      that such additional attribution notices cannot be construed\n      as modifying the License.\n\n\nYou may add Your own copyright statement to Your modifications and\n  may provide additional or different license terms and conditions\n  for use, reproduction, or distribution of Your modifications, or\n  for any such Derivative Works as a whole, provided Your use,\n  reproduction, and distribution of the Work otherwise complies with\n  the conditions stated in this License.\n\n\n\n\n\n\nSubmission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n\n\n\n\n\nTrademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n\n\n\n\n\nDisclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n\n\n\n\n\nLimitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n\n\n\n\n\nAccepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n\n\n\n\n\nEND OF TERMS AND CONDITIONS\n\n\nAPPENDIX: How to apply the Apache License to your work.\n\n\n  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \n{}\n\n  replaced with your own identifying information. (Don\nt include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \nprinted page\n as the copyright notice for easier\n  identification within third-party archives.\n\n\n\n\n\nCopyright {yyyy} {name of copyright owner}\n\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n\n\n\n\nUnless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.", 
            "title": "License"
        }
    ]
}